name: Java_CI_with_Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    # The repository will be build once a day at 00:00 GMT.
    - cron: "0 0 * * *"
permissions:
  actions: read           # for  detecting the Github Actions environment
  id-token: write         # for creating OIDC tokens for signing
  packages: write         # for uploading attestations
  contents: read          # read the contents permission
  security-events: write  # for uploading code scanning


jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '11' ]
    env:
      REPOSITORY_PREFIX: "artifactory.rodolphef.org/dev-oci"
    outputs:
      image:  ${{ vars.JF_HOST }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: checkout Git repository
        uses: actions/checkout@v4
      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v4
        with:
          java-version: ${{matrix.java}}
          distribution: 'adopt'
          cache: maven
      - name: Extracting the   artifact name and version 2 from POM file
        run: |
            echo "ArtifactName=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)" >> $GITHUB_ENV
            echo "Version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
      - name : Config JFrog CLI
        run : |
          jf mvnc --repo-deploy-releases=${{ vars.MVN_DEV_REPO_DEPLOY_RELEASES }} --repo-deploy-snapshots=${{ vars.MVN_DEV_REPO_DEPLOY_SNAPSHOTS }} --repo-resolve-releases=${{ vars.MVN_DEV_REPO_RESOLVE_RELEASES }} --repo-resolve-snapshots=${{ vars.MVN_DEV_REPO_RESOLVE_SNAPSHOTS }} 


      - name: Validate Artifactory Dependencies
        run: |
          # - name: Validate POM files
          jf mvn validate
          
          echo "Checking for corrupted artifacts in repository..."
          SEARCH_RESULT=$(jf rt search "${{ vars.MVN_DEV_REPO_DEPLOY_RELEASES }}/*.pom" --size=0 --format=json 2>/dev/null || echo "[]")
          if echo "$SEARCH_RESULT" | jq -e 'length > 0' >/dev/null 2>&1; then
            echo "Found corrupted POM files, cleaning up..."
            echo "$SEARCH_RESULT" | jq -r '.[] | .repo + "/" + .path + "/" + .name' | \
              while read -r artifact; do
                echo "Deleting corrupted artifact: $artifact"
                jf rt delete "$artifact" --quiet || true
              done
          else
            echo "No corrupted POM files found"
          fi
        
      - name: Align Project Versioning
        run: |
          # Get base version from POM (remove -SNAPSHOT if present)
          PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//')
          UNIFIED_VERSION="${PROJECT_VERSION}.${GITHUB_RUN_NUMBER}"
          
          echo "Current project version: $PROJECT_VERSION"
          echo "New unified version: $UNIFIED_VERSION"
          echo "UNIFIED_VERSION=${UNIFIED_VERSION}" >> $GITHUB_ENV
          
          # Check if version is inherited from parent
          PARENT_VERSION=$(mvn help:evaluate -Dexpression=project.parent.version -q -DforceStdout 2>/dev/null || echo "")
          if [ "$PROJECT_VERSION" = "$PARENT_VERSION" ] && [ -n "$PARENT_VERSION" ]; then
            echo "Version is inherited from parent POM, skipping version update"
            echo "Will use build number in container tags instead"
            echo "CONTAINER_VERSION=${UNIFIED_VERSION}" >> $GITHUB_ENV
          else
            echo "Version is not inherited, updating POM version"
            # Update POM version to match container version
            mvn versions:set -DnewVersion=${UNIFIED_VERSION} -DgenerateBackupPoms=false -DprocessAllModules=true
            
            # Verify version was updated correctly
            NEW_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            echo "Version after update: $NEW_VERSION"
            echo "CONTAINER_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          fi
        
          
      - name: Build Maven 
        env:
          REPOSITORY_PREFIX: "artifactory.rodolphef.org/dev-oci"
        run:  |
          jf mvn -B -DskipTests=true spring-boot:build-image -Pk8s -DREPOSITORY_PREFIX=$REPOSITORY_PREFIX -DVERSION=2.6.3-build-${{ github.run_number }}  --project "${{ vars.JFROG_PROJECT }}"
      # - name: Scan docker image locally with JFrog Xray
      #   env:
      #     REPOSITORY_PREFIX: "artifactory.rodolphef.org/dev-oci"
      #   run: | 
      #       jf docker scan --fail=false --threads=5 ${REPOSITORY_PREFIX}/spring-petclinic-cloud-api-gateway:${{ github.run_number }} --vuln --format=sarif > jfrog_docker_scan_cloud-api-gateway.sarif
      #       sed -i "s|\"uri\": \"\"|\"uri\": \"${REPOSITORY_PREFIX}/spring-petclinic-cloud-api-gateway:${{ github.run_number }}\"|g" jfrog_docker_scan_cloud-api-gateway.sarif
      #       ls -al ./jfrog_docker_scan_cloud-api-gateway.sarif
      #       pwd
      #       more jfrog_docker_scan_cloud-api-gateway.sarif
        
      #       jf docker scan --fail=false --threads=5 ${REPOSITORY_PREFIX}/spring-petclinic-cloud-visits-service:${{ github.run_number }} --vuln --format=sarif > jfrog_docker_scan_cloud-visits-service.sarif
      #       sed -i "s|\"uri\": \"\"|\"uri\": \"${REPOSITORY_PREFIX}/spring-petclinic-cloud-visits-service:${{ github.run_number }}\"|g" jfrog_docker_scan_cloud-visits-service.sarif
        
      #       jf docker scan --fail=false --threads=5 ${REPOSITORY_PREFIX}/spring-petclinic-cloud-vets-service:${{ github.run_number }} --vuln --format=sarif > jfrog_docker_scan_cloud-vets-service.sarif
      #       sed -i "s|\"uri\": \"\"|\"uri\": \"${REPOSITORY_PREFIX}/spring-petclinic-cloud-vets-service:${{ github.run_number }}\"|g" jfrog_docker_scan_cloud-vets-service.sarif
        
      #       jf docker scan --fail=false --threads=5 ${REPOSITORY_PREFIX}/spring-petclinic-cloud-customers-service:${{ github.run_number }} --vuln --format=sarif > jfrog_docker_scan_cloud-customers-service.sarif
      #       sed -i "s|\"uri\": \"\"|\"uri\": \"${REPOSITORY_PREFIX}/spring-petclinic-cloud-customers-service:${{ github.run_number }}\"|g" jfrog_docker_scan_cloud-customers-service.sarif
        
      #       jf docker scan --fail=false --threads=5 ${REPOSITORY_PREFIX}/spring-petclinic-cloud-admin-server:${{ github.run_number }} --vuln --format=sarif > jfrog_docker_scan_cloud-admin-server.sarif
      #       sed -i "s|\"uri\": \"\"|\"uri\": \"${REPOSITORY_PREFIX}/spring-petclinic-cloud-admin-server:${{ github.run_number }}\"|g" jfrog_docker_scan_cloud-admin-server.sarif
        
      #       jf docker scan --fail=false --threads=5 ${REPOSITORY_PREFIX}/spring-petclinic-cloud-discovery-service:${{ github.run_number }} --vuln --format=sarif > jfrog_docker_scan_cloud-discovery-service.sarif
      #       sed -i "s|\"uri\": \"\"|\"uri\": \"${REPOSITORY_PREFIX}/spring-petclinic-cloud-discovery-service:${{ github.run_number }}\"|g" jfrog_docker_scan_cloud-discovery-service.sarif
        
      #       jf docker scan --fail=false --threads=5 ${REPOSITORY_PREFIX}/spring-petclinic-cloud-config-server:${{ github.run_number }} --vuln --format=sarif > jfrog_docker_scan_cloud-config-server.sarif
      #       sed -i "s|\"uri\": \"\"|\"uri\": \"${REPOSITORY_PREFIX}/spring-petclinic-cloud-config-server:${{ github.run_number }}\"|g" jfrog_docker_scan_cloud-config-server.sarif
      # - name: Upload output to generate autofix
      #   uses: github/codeql-action/upload-sarif@v3
      #   with: 
      #     sarif_file: |
      #       /home/runner/work/spring-petclinic-cloud/spring-petclinic-cloud/jfrog_docker_scan_cloud-api-gateway.sarif
      #       /home/runner/work/spring-petclinic-cloud/spring-petclinic-cloud/jfrog_docker_scan_cloud-visits-service.sarif
      #       /home/runner/work/spring-petclinic-cloud/spring-petclinic-cloud/jfrog_docker_scan_cloud-vets-service.sarif
      #       /home/runner/work/spring-petclinic-cloud/spring-petclinic-cloud/jfrog_docker_scan_cloud-customers-service.sarif
      #       /home/runner/work/spring-petclinic-cloud/spring-petclinic-cloudjfrog_docker_scan_cloud-admin-server.sarif
      #       /home/runner/work/spring-petclinic-cloud/spring-petclinic-cloud/jfrog_docker_scan_cloud-discovery-service.sarif
      #       /home/runner/work/spring-petclinic-cloud/spring-petclinic-cloud/jfrog_docker_scan_cloud-config-server.sarif
      - name: Push container image to JFrog Artifactory
        env:
          REPOSITORY_PREFIX: "artifactory.rodolphef.org/dev-oci"
        run:  |
          for service in spring-petclinic-cloud-api-gateway spring-petclinic-cloud-visits-service spring-petclinic-cloud-vets-service spring-petclinic-cloud-customers-service spring-petclinic-cloud-admin-server spring-petclinic-cloud-discovery-service spring-petclinic-cloud-config-server; do
            jf docker push ${REPOSITORY_PREFIX}/${service}:2.6.3-build-${{ github.run_number }} --project "${{ vars.JFROG_PROJECT }}"
          done
      - name: Publish to JFrog Artifactory
        run: |
          # Collect environment variables for the build
          jf rt bce --project "${{ vars.JFROG_PROJECT }}" 
          # Collect VCS details from git and add them to the build
          jf rt bag --project "${{ vars.JFROG_PROJECT }}"
          # Publish build info
          jf rt bp --project "${{ vars.JFROG_PROJECT }}"
          # Scan the published build-info with Xray
          jf rt bs Java_CI_with_Maven ${{github.run_number}} --project "${{ vars.JFROG_PROJECT }}"
      - name: Create test evidence
        id: create-evd  
        run: |
          jf evd create --predicate=api_test_run.json --predicate-type=https://jfrog.com/evidence/test-results/v1 \
          --package-name spring-clinic --package-version 2.6.3-build-${{ github.run_number }} --package-repo-name dev-oci \
          --key private.pem --key-alias Evidence --markdown test-results.md --project=${{ vars.JFROG_PROJECT }}
      - name: Create Release Bundle for RLM
        run: |
          jf rbc --build-name Java_CI_with_Maven --build-number ${{github.run_number}} --signing-key=${{ secrets.KEY_ALIAS }} spring-petclinic-cloud 2.6.3-build-${{github.run_number}}  --sync=true --project "${{ vars.JFROG_PROJECT }}"
          jf evd create --predicate ./feature.json --predicate-type=https://jfrog.com/evidence/test-results/v1 \
          --release-bundle spring-petclinic-cloud  --release-bundle-version 1.${{ github.run_number }}.0 \
          --key private.pem  --key-alias Evidence  --project=${{ vars.JFROG_PROJECT }} --markdown feature-flags.md
  provenance:
    needs: [build]
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
    with:
      image: ${{ needs.build.outputs.image }}
      digest: ${{ needs.build.outputs.digest }}
      private-repository: true
    secrets:
      registry-username: ${{ secrets.REGISTRY_USERNAME }}
      registry-password: ${{ secrets.JF_ACCESS_TOKEN }}
  # provenance:
  #   needs: [build]
  #   uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
  #   with:
  #     image:  ${{ needs.build.outputs.image }}
  #     digest: ${{ needs.build.outputs.digest }}
  #     private-repository: true          
  #   secrets:
  #     registry-username: rodolphef@jfrog.com
  #     registry-password: ${{ secrets.JF_ACCESS_TOKEN }}
            